{"version":3,"sources":["data-services/levels.js","data-services/merge.js","components/map/layers.js","components/map/geo-coder.js","components/map/popup.js","utils/map/index.js","components/map/index.js","components/data-context.js","components/slider/index.js","components/selector/index.js","components/suburb-suggest/index.js","utils/hooks/index.js","components/totals/common.js","components/totals/all-suburbs.js","components/totals/by-suburb.js","components/totals/index.js","components/correlation/grid.js","components/correlation/scatter-plots/all-charts.js","components/correlation/chart-suggest/index.js","components/correlation/scatter-plots/by-pair.js","components/correlation/scatter-plots/index.js","components/correlation/numbers.js","components/correlation/index.js","app/index.js","index.js"],"names":["caseLevels","start","end","key","testLevels","activeLevels","recoveredLevels","bagKeys","date","testsKey","activeKey","totalKey","rangeTestsKey","rangeActiveKey","rangeRecoveredKey","recoveredKey","deadKey","formatMap","data","reduce","acc","curr","rootEntry","has","Date","get","Map","set","POA_NAME16","getLevelKey","levels","count","find","item","undefined","mergeData","postCodesGeometry","postCodes","casesInitial","cases","populationInitial","population","testsInitial","tests","caseLevelKey","testLevelKey","activeLevelsKey","recoveredLevelsKey","toString","entry","suburbs","push","postCode","name","Combined","populationByCode","dates","Array","from","keys","selectedDate","length","features","forEach","feature","caseEntry","testsEntry","properties","hasCasesPOA","caseEntryValue","total","parseInt","Cases","recovered","Recovered","dead","Deaths","Active","testEntryValue","Number","testRange","Tests","RecentTests","Recent","populationEntry","Tot_p_p","suburbName","layers","getCodeFilter","context","map","i","id","split","shift","text","cur","GeoCoder","mapRef","containerRef","token","onViewportChange","countries","bbox","limit","mapboxApiAccessToken","filter","Popup","latitude","longitude","suburb","active","tested","closeButton","closeOnClick","process","mapType","Object","freeze","selectorData","useContext","DataContext","useState","zoom","viewport","setViewport","mapStyle","setMapStyle","useRef","geoCoderRef","getPropKeys","show","popup","setPopup","slice","Math","min","join","propertyKeys","usePopup","useEffect","current","getMap","setLayoutProperty","swap","className","notifySelected","title","ref","width","height","nextViewport","onLoad","onClick","e","lngLat","transitionDuration","type","source","paint","createContext","ContextProvider","Consumer","Provider","getResource","url","fetch","then","response","json","console","log","importData","a","DataProvider","children","setData","result","setDate","value","DateSlider","setValue","styles","track","axis","x","xmax","xstep","onChange","Selector","selectedKey","setSelectedKey","items","checked","setTimeout","renderSuggestion","suggestion","substring","SuburbSuggest","onSuburbSelected","initial","suggestions","setSuggestions","inputProps","placeholder","event","newValue","onSuggestionsFetchRequested","toLowerCase","includes","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","useResize","borderWidth","window","innerWidth","setWidth","resizeListener","useCallback","addEventListener","removeEventListener","calculateWidth","dataKeys","fill","legend","AllSuburbsBarChart","getBars","xAxisDataKey","getTooltipLabel","getTooltipValue","getLegendLabel","margin","top","right","left","bottom","strokeDasharray","dataKey","labelFormatter","formatter","verticalAlign","wrapperStyle","lineHeight","y","stroke","tooltipLabel","tooltipValue","AllSuburbs","isGrouped","useMemo","values","entries","renderGroup","renderIndividual","BySuburb","setPostCode","x1","y1","x2","y2","offset","stopColor","stopOpacity","fillOpacity","Totals","displayType","setDisplayType","Grid","computeHistogram","require","Histogram","color","histogram","AllCharts","plots","percent","useResizePercent","widthByPercent","cell","isDiagonal","names","unit","cursor","charts","ChartSuggest","initialSuggestion","Suggester","selectedChart","selectChart","plot","ScatterPlot","regressionFrom","regressionTo","line","linearRegressionLine","linearRegression","concat","trunc","ChartByPair","renderBody","byName","Numbers","sampleCorrelation","toFixed","Correlation","casesByCode","postalCode","totalCases","byPopulation","_","sort","b","byCases","byActive","byRecovered","byTests","App","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fc679c2.chunk.js","sourcesContent":["export const caseLevels = [{\n    start: 0,\n    end: 9,\n    key: 9\n},{\n    start: 10,\n    end: 19,\n    key: 19\n},{\n    start: 20,\n    end: 29,\n    key: 29\n},{\n    start: 30,\n    end: 39,\n    key: 39\n},{\n    start: 40,\n    end: 49,\n    key: 49\n},{\n    start: 50,\n    key: 500\n}];\n\n\nexport const testLevels = [{\n    start: 0,\n    end: 250,\n    key: 250\n},{\n    start: 251,\n    end: 499,\n    key: 500\n},{\n    start: 500,\n    end: 999,\n    key: 1000\n},{\n    start: 1000,\n    end: 1999,\n    key: 2000\n},{\n    start: 2000,\n    end: 2999,\n    key: 3000\n},{\n    start: 3000,\n    key: 3000000\n}];\n\nexport const activeLevels = [{\n    start: 0,\n    end: 2,\n    key: 2\n},{\n    start: 3,\n    end: 7,\n    key: 7\n},{\n    start: 8,\n    end: 20,\n    key: 20\n},{\n    start: 21,\n    end: 50,\n    key: 50\n},{\n    start: 51,\n    key: 51\n}];\n\nexport const recoveredLevels = [{\n    start: 0,\n    end: 2,\n    key: 2\n},{\n    start: 3,\n    end: 7,\n    key: 7\n},{\n    start: 8,\n    end: 20,\n    key: 20\n},{\n    start: 21,\n    end: 50,\n    key: 50\n},{\n    start: 51,\n    key: 51\n}];\n\nexport const bagKeys = (date) => ({\n    testsKey: `${date}-tests`,\n    activeKey: `${date}-active`,\n    totalKey: `${date}-total`,\n    rangeTestsKey: `${date}-testRange`,\n    rangeActiveKey: `${date}-activeRange`,\n    rangeRecoveredKey: `${date}-recoveredRange`,\n    recoveredKey: `${date}-recovered`,\n    deadKey: `${date}-dead`\n});\n\n","import {\n    caseLevels,\n    testLevels,\n    activeLevels,\n    recoveredLevels,\n    bagKeys } from './levels';\n\nconst formatMap = (data) =>\n    data.data.reduce((acc, curr) => {\n        const rootEntry = acc.has(curr.Date) ? acc.get(curr.Date) : new Map();\n\n        acc.set(curr.Date, rootEntry);\n        rootEntry.set(curr.POA_NAME16, curr);\n\n        return acc;\n    }, new Map());\n\nconst formatPopulation = (data) =>\n    data.reduce((acc, curr) => {\n        const key = curr.POA_NAME16.toString();\n\n        const population = acc.population;\n        const entry = population.has(key) ? population.get(key) : curr;\n        population.set(key, entry);\n\n        acc.suburbs.push({ postCode: key, name: curr.Combined  });\n\n        return acc;\n    }, {\n        population: new Map(),\n        suburbs: []\n    });\n\nconst getLevelKey = (levels) => (count) =>\n    levels.find(item => {\n        if(item.start === undefined &&\n            count <= item.end) {\n                return true;\n        }\n\n        if(item.end === undefined &&\n            count >= item.start) {\n                return true;\n        }\n\n        if(item.start <= count && count <= item.end) {\n            return true;\n        }\n\n        return false;\n    }).key;\n\nexport const mergeData = ({\n    postCodes: postCodesGeometry,\n    cases: casesInitial,\n    population: populationInitial,\n    tests: testsInitial }) => {\n\n    if(!postCodesGeometry) {\n        return { };\n    }\n\n    const caseLevelKey = getLevelKey(caseLevels);\n    const testLevelKey = getLevelKey(testLevels);\n    const activeLevelsKey = getLevelKey(activeLevels);\n    const recoveredLevelsKey = getLevelKey(recoveredLevels);\n\n    const cases = formatMap(casesInitial);\n    const tests = formatMap(testsInitial);\n    const { population: populationByCode, suburbs } = formatPopulation(populationInitial);\n\n    const dates = Array.from(cases.keys());\n    const selectedDate = dates[dates.length - 1];\n\n    postCodesGeometry.features.forEach(feature => {\n        dates.forEach(date => {\n            const caseEntry = cases.get(date);\n            const testsEntry = tests.get(date);\n\n            const { testsKey, activeKey, totalKey, recoveredKey, deadKey,\n                rangeTestsKey, rangeActiveKey, rangeRecoveredKey } = bagKeys(date);\n\n            feature.properties[date] = 0;\n\n            feature.properties[testsKey] = 0;\n            feature.properties[activeKey] = 0;\n            feature.properties[totalKey] = 0;\n            feature.properties[recoveredKey] = 0;\n            feature.properties[deadKey] = 0;\n\n            // ranges\n            feature.properties[rangeTestsKey] = 0;\n            feature.properties[rangeActiveKey] = 0;\n            feature.properties[rangeRecoveredKey] = 0;\n\n            const hasCasesPOA = caseEntry.has(feature.properties.POA_NAME16);\n\n            if(hasCasesPOA) {\n                const caseEntryValue = caseEntry.get(feature.properties.POA_NAME16);\n                const total = parseInt(caseEntryValue.Cases);\n                const recovered = parseInt(caseEntryValue.Recovered);\n                const dead = parseInt(caseEntryValue.Deaths);\n                caseEntryValue.Active = total - (recovered + dead);\n\n                feature.properties[date] = caseLevelKey(total);\n                feature.properties[rangeActiveKey] = activeLevelsKey(caseEntryValue.Active);\n                feature.properties[rangeRecoveredKey] = recoveredLevelsKey(recovered);\n\n                feature.properties[totalKey] = total;\n                feature.properties[activeKey] = caseEntryValue.Active;\n                feature.properties[recoveredKey] = recovered;\n                feature.properties[deadKey] = dead;\n            }\n\n            if(testsEntry && testsEntry.has(feature.properties.POA_NAME16)) {\n                const testEntryValue = testsEntry.get(feature.properties.POA_NAME16);\n                const total = parseInt(testEntryValue.Number);\n                const testRange = testLevelKey(total);\n\n                if(hasCasesPOA) {\n                    const caseEntryValue = caseEntry.get(feature.properties.POA_NAME16);\n                    caseEntryValue.Tests = testEntryValue.Number;\n                    caseEntryValue.RecentTests = testEntryValue.Recent;\n                }\n\n                feature.properties[testsKey] = total;\n                feature.properties[rangeTestsKey] = testRange;\n            }\n        });\n\n        if(populationByCode.has(feature.properties.POA_NAME16)) {\n            const populationEntry = populationByCode.get(feature.properties.POA_NAME16);\n            feature.properties.population = populationEntry.Tot_p_p;\n            feature.properties.suburbName = populationEntry.Combined;\n        }\n    });\n\n    return {\n        postCodesGeometry,\n        suburbs,\n        cases,\n        populationByCode,\n        population: populationInitial,\n        tests,\n        selectedDate,\n        dates\n    };\n}\n","import React from 'react';\nimport { Source, Layer } from 'react-map-gl';\nimport { bagKeys } from 'data-services/levels'\n\nimport { caseLevels, testLevels, activeLevels } from 'data-services'\n\nconst getCaseColorSchema = () => ([\n    0, 'transparent',\n    caseLevels[0].key, '#ffb3b3',\n    caseLevels[1].key, '#ff8080',\n    caseLevels[2].key, '#ff4d4d',\n    caseLevels[3].key, '#e60000',\n    caseLevels[4].key, '#b30000',\n    caseLevels[5].key, '#660000'\n]);\n\nconst getTestColorSchema = () => ([\n    0,'transparent',\n    testLevels[0].key, '#a6c6ed',\n    testLevels[1].key, '#8ab3e6',\n    testLevels[2].key, '#6189ba',\n    testLevels[3].key, '#4478b8',\n    testLevels[4].key, '#326cb3',\n    testLevels[5].key, '#1a5cad'\n]);\n\nconst getActiveColorSchema = () => ([\n    0,'transparent',\n    activeLevels[0].key, '#ffb3b3',\n    activeLevels[1].key, '#ff8080',\n    activeLevels[2].key, '#ff4d4d',\n    activeLevels[3].key, '#e60000',\n    activeLevels[4].key, '#b30000',\n]);\n\nconst getRecoveredColorSchema = () => ([\n    0,'transparent',\n    activeLevels[0].key, '#a8edbb',\n    activeLevels[1].key, '#73de91',\n    activeLevels[2].key, '#3aba5e',\n    activeLevels[3].key, '#178f39',\n    activeLevels[4].key, '#0a6624',\n]);\n\nexport const layers = {\n    casesId: 'PostcodeCases',\n    testsId: 'PostcodeTests',\n    activeId: 'PostcodeActive',\n    recoveredId: 'PostcodeRecovered'\n}\n\nexport const source = (data, selectedDate) => {\n\n    const { rangeTestsKey, rangeActiveKey, rangeRecoveredKey } = bagKeys(selectedDate);\n\n    return (\n        <Source type=\"geojson\" data={data}>\n            <Layer\n                id=\"Postcode\"\n                source=\"Postcode\"\n                type=\"line\"\n                paint={{\n                    \"line-color\": \"#bdb8b7\",\n                    \"line-width\": 1\n                }}\n            />\n            <Layer\n                id={layers.testsId}\n                source=\"Postcode\"\n                type=\"fill\"\n                paint={{\n                    'fill-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', rangeTestsKey],\n                        ...getTestColorSchema()\n                    ],\n                    'fill-opacity': 0.8\n                }}\n            />\n            <Layer\n                id={layers.activeId}\n                source=\"Postcode\"\n                type=\"fill\"\n                paint={{\n                    'fill-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', rangeActiveKey],\n                        ...getActiveColorSchema()\n                    ],\n                    'fill-opacity': 0.8\n                }}\n            />\n            <Layer\n                id={layers.recoveredId}\n                source=\"Postcode\"\n                type=\"fill\"\n                paint={{\n                    'fill-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', rangeRecoveredKey],\n                        ...getRecoveredColorSchema()\n                    ],\n                    'fill-opacity': 0.8\n                }}\n            />\n            <Layer\n                id={layers.casesId}\n                source=\"Postcode\"\n                type=\"fill\"\n                paint={{\n                    'fill-color': [\n                        'interpolate',\n                        ['linear'],\n                        ['get', selectedDate],\n                        ...getCaseColorSchema()\n                    ],\n                    'fill-opacity': 0.8\n                }}\n            />\n        </Source>\n    )\n}\n\nexport const swap = (map, mapStyle, mapType) => {\n    if(mapStyle === mapType.cases) {\n        map.setLayoutProperty(layers.testsId, 'visibility', 'none');\n        map.setLayoutProperty(layers.casesId, 'visibility', 'visible');\n        map.setLayoutProperty(layers.activeId, 'visibility', 'none');\n        map.setLayoutProperty(layers.recoveredId, 'visibility', 'none');\n\n    } else if(mapStyle === mapType.tests) {\n        map.setLayoutProperty(layers.testsId, 'visibility', 'visible');\n        map.setLayoutProperty(layers.casesId, 'visibility', 'none');\n        map.setLayoutProperty(layers.activeId, 'visibility', 'none');\n        map.setLayoutProperty(layers.recoveredId, 'visibility', 'none');\n\n    } else if(mapStyle === mapType.active) {\n        map.setLayoutProperty(layers.testsId, 'visibility', 'none');\n        map.setLayoutProperty(layers.casesId, 'visibility', 'none');\n        map.setLayoutProperty(layers.activeId, 'visibility', 'visible');\n        map.setLayoutProperty(layers.recoveredId, 'visibility', 'none');\n\n    } else if(mapStyle === mapType.recovered) {\n        map.setLayoutProperty(layers.testsId, 'visibility', 'none');\n        map.setLayoutProperty(layers.casesId, 'visibility', 'none');\n        map.setLayoutProperty(layers.activeId, 'visibility', 'none');\n        map.setLayoutProperty(layers.recoveredId, 'visibility', 'visible');\n    }\n}\n","import React from 'react';\nimport Geocoder from 'react-map-gl-geocoder';\n\nconst getCodeFilter = (item) => {\n    if (!item.context) {\n        return item;\n    }\n\n    if (item.context.length <= 4) {\n        return item.context.map(function (i) {\n            // id is in the form {index}.{id} per https://github.com/mapbox/carmen/blob/master/carmen-geojson.md\n            // this example attempts to find the `region` named `New South Wales`\n            return (i.id.split('.').shift() === 'region' && i.text === 'New South Wales');\n        }).reduce(function (acc, cur) {\n            return acc || cur;\n        });\n    }\n}\n\nexport const GeoCoder = ({ mapRef, containerRef, token, onViewportChange }) => (\n    <Geocoder\n        mapRef={mapRef}\n        containerRef={containerRef}\n        countries=\"au\"\n        bbox={[139.965, -38.030, 155.258, -27.839]}\n        limit={200}\n        onViewportChange={onViewportChange}\n        mapboxApiAccessToken={token}\n        filter={getCodeFilter}\n    />\n)\n\n","import React, { useState } from 'react';\nimport { Popup as MapPopup } from 'react-map-gl';\n\n\nexport const usePopup = (getPropKeys) => {\n    const [popup, setPopup] = useState({\n        show: false,\n        latitude: undefined,\n        longitude: undefined,\n        suburb: undefined,\n        total: undefined,\n        tested: undefined,\n        active: undefined,\n        recovered: undefined,\n        dead: undefined,\n        population: undefined\n    });\n\n    const changePopup = (features, [longitude, latitude]) => {\n        if(!features || features.length <= 0 || !features[0].properties.POA_NAME16) {\n            setPopup({...popup, show: false});\n            return;\n        }\n\n        const suburbs = features[0].properties.suburbName.split(',');\n        const suburb = suburbs.slice(0, Math.min(3, suburbs.length)).join(', ');\n        const population =  features[0].properties.population;\n\n        const properties = features[0].properties;\n        const propertyKeys = getPropKeys();\n        const total = properties[propertyKeys.totalKey];\n        const tested = properties[propertyKeys.testsKey];\n        const active = properties[propertyKeys.activeKey];\n        const recovered = properties[propertyKeys.recoveredKey];\n        const dead = properties[propertyKeys.deadKey];\n\n        setPopup({\n            ...popup,\n            show: true,\n            longitude,\n            latitude,\n            suburb,\n            total,\n            tested,\n            active,\n            recovered,\n            dead,\n            population\n        });\n    };\n\n    return [popup, changePopup];\n}\n\nexport const Popup = ({\n    latitude,\n    longitude,\n    suburb,\n    total,\n    active,\n    recovered,\n    tested,\n    dead,\n    population\n}) => (\n    <MapPopup\n        latitude={latitude}\n        longitude={longitude}\n        closeButton={false}\n        closeOnClick={false}>\n        <div>\n            <strong>{suburb}</strong>\n            <br/>\n            <span>Total: {total}</span>\n            <br />\n            <span>Active: {active}</span>\n            <br />\n            <span>Recovered: {recovered}</span>\n            <br />\n            <span>Tested: {tested}</span>\n            <br />\n            <span>Dead: {dead}</span>\n            <br />\n            <span>Population: {population}</span>\n        </div>\n    </MapPopup>\n);\n","export const token = process.env.REACT_APP_MAP_TOKEN\n","import 'react-map-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport './map.css';\n\nimport React, { useState, useRef, useContext, useEffect } from 'react';\nimport MapGL from 'react-map-gl';\nimport { DataContext, Selector } from 'components';\nimport { bagKeys } from 'data-services';\nimport { source, layers, swap } from './layers';\nimport { GeoCoder } from './geo-coder';\nimport { usePopup, Popup } from './popup';\nimport { token } from 'utils/map';\n\nconst mapType = Object.freeze({\n    cases: layers.casesId,\n    tests: layers.testsId,\n    active: layers.activeId,\n    recovered: layers.recoveredId\n});\n\nconst selectorData = [{\n    key: mapType.cases,\n    name: 'Total'\n}, {\n    key: mapType.active,\n    name: 'Active'\n},{\n    key: mapType.recovered,\n    name: 'Recovered'\n},{\n    key: mapType.tests,\n    name: 'Tests'\n}];\n\nexport const Map = () => {\n    const { postCodesGeometry, selectedDate } = useContext(DataContext);\n    const [viewport, setViewport] = useState({\n        zoom: 6,\n        latitude: -32.8688,\n        longitude: 148.0093\n    });\n    const [mapStyle, setMapStyle] = useState('');\n    const mapRef = useRef(null);\n    const geoCoderRef = useRef(null);\n    const [popup, setPopup] = usePopup(() => bagKeys(selectedDate))\n\n    useEffect(() => {\n        const map = mapRef.current?.getMap();\n        if(map) {\n            swap(map, mapStyle, mapType);\n        }\n\n    }, [mapStyle]);\n\n    const handleGeocoderViewportChange = (viewport) => {\n        const geocoderDefaultOverrides = { transitionDuration: 1000 }\n\n        return setViewport({\n            ...viewport,\n            ...geocoderDefaultOverrides\n        })\n    }\n\n    const handleClick = (e) => {\n        setPopup(e.features || null, e.lngLat);\n    }\n\n    if(!postCodesGeometry) {\n        return null;\n    }\n\n    return (\n        <div className=\"map\">\n            <Selector\n                data={selectorData}\n                notifySelected={setMapStyle}\n                title=\"Cases #\"\n             />\n            <div ref={geoCoderRef} className=\"geocoder\"></div>\n            <MapGL\n                ref={mapRef}\n                {...viewport}\n                width=\"100%\"\n                height=\"700px\"\n                mapStyle=\"mapbox://styles/mapbox/streets-v10\"\n                onViewportChange={nextViewport => setViewport(nextViewport)}\n                onLoad={() => { setMapStyle(mapType.cases); }}\n                mapboxApiAccessToken={token}\n                onClick={handleClick}>\n                <GeoCoder\n                    mapRef={mapRef}\n                    containerRef={geoCoderRef}\n                    onViewportChange={handleGeocoderViewportChange}\n                    token={token}\n                />\n                {source(postCodesGeometry, selectedDate)}\n                {popup.show && <Popup {...popup} />}\n            </MapGL>\n        </div>\n    );\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { mergeData } from 'data-services'\n\nexport const DataContext = createContext({});\nexport const DataConsumer = DataContext.Consumer;\nconst ContextProvider = DataContext.Provider;\n\nconst getResource = (url) =>\n    fetch(url)\n    .then(response => response.json())\n    .then(data => { console.log(data); return data })\n\nconst importData = async () => {\n    const postCodes = await getResource('https://raw.githubusercontent.com/maxgherman/nsw-corona-virus/gh-pages/post-codes.json')\n    const cases = await getResource('https://raw.githubusercontent.com/maxgherman/nsw-corona-virus/gh-pages/cases-total.json')\n    const population = await getResource('https://raw.githubusercontent.com/maxgherman/nsw-corona-virus/gh-pages/population.json')\n    const tests = await getResource('https://raw.githubusercontent.com/maxgherman/nsw-corona-virus/gh-pages/tests-total.json')\n\n    return { postCodes, cases, population, tests };\n}\n\nexport const DataProvider = ({ children }) => {\n\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        importData()\n        .then(({ postCodes, cases, population, tests }) => {\n\n            const data = mergeData({ postCodes, cases, population, tests });\n\n            const result = {\n                ...data,\n                setDate: (date) => {\n                    setData({\n                        ...result,\n                        selectedDate: date\n                    });\n                }\n            }\n\n            setData(result);\n        });\n\n    }, [])\n\n    return (\n        <ContextProvider value={data}>\n            {children}\n        </ContextProvider>\n    );\n}\n","import './slider.css'\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport Slider from 'react-input-slider';\nimport { DataContext } from 'components/data-context';\n\nexport const DateSlider = () => {\n\n    const { dates, setDate } = useContext(DataContext);\n    const [value, setValue] = useState(0)\n\n    useEffect(() => {\n        if(dates != null) {\n            setValue(dates.length - 1)\n        }\n    }, [dates])\n\n    if(!dates) {\n        return null;\n    }\n\n    return (\n        <div className=\"slider\">\n            <h2 className=\"header\">{dates[value]}</h2>\n            <Slider styles={{ track: { width: 'calc(100% - 20px)' }}}\n                axis=\"x\"\n                x={value}\n                xmax={dates.length -1}\n                xstep={1}\n                onChange={({ x }) => {setValue(x); setDate(dates[value])}}\n            />\n        </div>\n    );\n};\n","import './selector.css';\nimport React, { useState } from 'react';\n\nexport const Selector = ({ data, title, notifySelected }) => {\n\n    const [selectedKey, setSelectedKey] = useState(data[0].key);\n\n    const items = data\n        .map(({ key, name}) => (\n            <label\n                key={key}\n                className={`item${selectedKey === key ? ' selected' : ''}`}\n            >\n                <input type=\"radio\" name=\"test\" value={key}\n                    checked={selectedKey === key}\n                    onChange={() => {\n                        setSelectedKey(key);\n\n                        setTimeout(() => {\n                            notifySelected(key);\n                        }, 0);\n                    }} />\n                {name}\n            </label>\n        ));\n\n    return (\n        <div className=\"selector\">\n            <label className=\"item\">\n                {title}:\n            </label>\n            {items}\n        </div>\n    );\n}\n","import './suburb-suggest.css';\n\nimport React, { useState, useContext } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { DataContext } from 'components'\n\nconst renderSuggestion = suggestion => (\n    <div className=\"suggestion-item\">\n        <strong>{suggestion.postCode}</strong>\n        <br/>\n        <div>\n            <span className=\"suburb-short\">{suggestion.name.substring(0, 40)}</span>\n            <span className=\"suburb-long\" >{suggestion.name.substring(40)}</span>\n        </div>\n    </div>\n);\n\nexport const SuburbSuggest = ({ onSuburbSelected, value: initial }) => {\n\n    const [value, setValue ] = useState(initial);\n    const [ suggestions, setSuggestions ] = useState([]);\n    const { suburbs } = useContext(DataContext);\n\n    const getSuggestions = value =>\n        suburbs.filter(item =>\n            item.name.toLowerCase().includes(value.toLowerCase()) ||\n            item.postCode.includes(value))\n        .slice(0, 5);\n\n    const onSuggestionsFetchRequested = ({ value }) => {\n        if(!value || value.length < 2) {\n            return;\n        }\n\n        const data = getSuggestions(value);\n\n        if(data.length > 0) {\n            setSuggestions(data);\n        }\n    };\n\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const onChange = (event, { newValue }) => {\n        setValue(newValue);\n    };\n\n    const getSuggestionValue = suggestion => {\n        const result = `${suggestion.postCode} ${suggestion.name}`;\n\n        if(!onSuburbSelected) {\n            return result;\n        }\n\n        setTimeout(() => {\n            onSuburbSelected(suggestion.postCode);\n        }, 0);\n\n        return result;\n    };\n\n    const inputProps = {\n        placeholder: 'Search suburb name/zip code',\n        value,\n        onChange\n    };\n\n    return (\n        <div className=\"suburb-suggest\">\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n        </div>\n    );\n}\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useResize = (borderWidth = 50) => {\n    const [width, setWidth] = useState(window.innerWidth - borderWidth);\n\n    const resizeListener = useCallback(() =>\n        setWidth(window.innerWidth - borderWidth), [borderWidth])\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        }\n    }, [borderWidth, resizeListener]);\n\n    return [width];\n}\n\nconst calculateWidth = x => (window.innerWidth * x) / 100\n\n\nexport const useResizePercent = (percent = 50) => {\n\n    const [width, setWidth] = useState(calculateWidth(percent));\n\n    const resizeListener = useCallback(() =>\n        setWidth(calculateWidth(percent)), [percent])\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", resizeListener);\n\n        return () => {\n            window.removeEventListener(\"resize\", resizeListener);\n        }\n    }, [percent, resizeListener]);\n\n    return [width];\n}\n","export const dataKeys = Object.freeze({\n    'Cases' : { id: 1, fill: '#ff8080', legend: 'Total Cases' },\n    'Active': { id: 2, fill: '#e60000', legend: 'Active' },\n    'Recovered': { id: 3, fill: '#0a6624', legend: 'Recovered' },\n    'Tests': { id: 4, fill: '#6189ba', legend: 'Total Tests' },\n    'RecentTests': { id: 5, fill: '#6189ba', legend: 'Recent Tests' }\n});\n","import React, { useContext, useMemo } from 'react';\nimport {\n    BarChart, Bar, Brush, ReferenceLine, YAxis, XAxis,\n    CartesianGrid, Tooltip, Legend\n} from 'recharts';\nimport { DataContext } from 'components';\nimport { useResize } from 'utils/hooks';\nimport { dataKeys } from './common'\n\nconst AllSuburbsBarChart = ({\n    getBars,\n    data,\n    xAxisDataKey,\n    getTooltipLabel,\n    getTooltipValue,\n    getLegendLabel\n }) => {\n    const [width] = useResize();\n\n    return (\n        <BarChart\n            width={width}\n            height={500}\n            data={data}\n            margin={{ top: 5, right: 130, left: 70, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <YAxis />\n            <XAxis dataKey={xAxisDataKey} />\n            <Tooltip\n                labelFormatter={getTooltipLabel}\n                formatter={getTooltipValue}\n            />\n            <Legend\n                verticalAlign=\"top\"\n                wrapperStyle={{ lineHeight: '50px' }}\n                formatter={getLegendLabel} />\n            <ReferenceLine y={0} stroke=\"#000\" />\n            <Brush dataKey=\"name\" height={30} stroke=\"#8884d8\" />\n            {getBars()}\n        </BarChart>\n    )\n}\n\nconst legend = (key) => {\n    const result = dataKeys[key];\n    return result ? result.legend : key;\n}\n\nconst tooltipLabel = (value) => `Postal Code: ${value}`;\nconst tooltipValue = (value, name) => {\n    const displayName = legend(name);\n    return [value, displayName ];\n}\n\nconst renderGroup = (data) => (\n    <AllSuburbsBarChart\n        getBars={() => Object.entries(dataKeys)\n            .map(([key, item]) =>\n                <Bar\n                    key={item.id}\n                    dataKey={key}\n                    fill={item.fill}\n                />\n            )\n        }\n        data={data}\n        xAxisDataKey=\"POA_NAME16\"\n        getTooltipLabel={tooltipLabel}\n        getTooltipValue={tooltipValue}\n        getLegendLabel={legend}\n    />\n);\n\nconst renderIndividual = (data) =>\n    Object.entries(dataKeys)\n    .map(([key, item]) =>\n        <AllSuburbsBarChart\n            key={item.id}\n            getBars={() => <Bar dataKey={key} fill={item.fill} />}\n            data={data}\n            xAxisDataKey=\"POA_NAME16\"\n            getTooltipLabel={tooltipLabel}\n            getTooltipValue={tooltipValue}\n            getLegendLabel={legend}\n    />\n);\n\nexport const AllSuburbs = ({ isGrouped }) => {\n\n    const { cases, selectedDate } = useContext(DataContext);\n\n    const data = useMemo(() =>\n        [...cases.get(selectedDate).values()],\n        [cases, selectedDate]\n    );\n\n    return isGrouped ? renderGroup(data) : renderIndividual(data);\n};\n","import React, { useContext, useMemo, useState } from 'react';\nimport {\n    AreaChart, Area, YAxis, XAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts';\nimport { useResize } from 'utils/hooks'\nimport { DataContext, SuburbSuggest } from 'components';\n\nconst dataKeys = Object.freeze({\n    Cases : { key: 'Cases', fill: '#ff8080', legend: 'Total Cases' },\n    Active: { key: 'Active', fill: '#e60000', legend: 'Active' },\n    Recovered: { key: 'Recovered', fill: '#0a6624', legend: 'Recovered' },\n    Tests: { key: 'Tests', fill: '#6189ba', legend: 'Total Tests' },\n    RecentTests: { key: 'RecentTests', fill: '#6189ba', legend: 'Recent Tests' }\n});\n\nconst legend = (key) => {\n    const result = dataKeys[key];\n    return result ? result.legend : key;\n}\n\nconst tooltipLabel = (value) => `Date: ${value}`;\nconst tooltipValue = (value, name) => {\n    const displayName = legend(name);\n    return [value, displayName ];\n}\n\nexport const BySuburb = () => {\n\n    const [width] = useResize();\n    const { cases, dates } = useContext(DataContext);\n    const [ postCode, setPostCode ] = useState('');\n\n    const data = useMemo(() => {\n\n        if(!postCode) {\n            return [];\n        }\n\n        return dates\n        .map(date => {\n            const caseEntry = cases.get(date);\n\n            if(!caseEntry) {\n                return null;\n            }\n\n            return caseEntry.get(postCode)\n        });\n    }, [postCode, dates, cases]);\n\n\n    return (\n        <>\n            <SuburbSuggest onSuburbSelected={setPostCode} value={postCode} />\n            <AreaChart\n                width={width}\n                height={300}\n                data={data}\n                margin={{ top: 5, right: 130, left: 70, bottom: 5 }}>\n                <defs>\n                    <linearGradient id=\"cases\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={dataKeys.Cases.fill} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={dataKeys.Cases.fill} stopOpacity={0}/>\n                    </linearGradient>\n                    <linearGradient id=\"active\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={dataKeys.Active.fill} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={dataKeys.Active.fill} stopOpacity={0}/>\n                    </linearGradient>\n                    <linearGradient id=\"recovered\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={dataKeys.Recovered.fill} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={dataKeys.Recovered.fill} stopOpacity={0}/>\n                    </linearGradient>\n                </defs>\n                <XAxis dataKey=\"Date\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"1 1\" />\n                <Tooltip\n                    labelFormatter={tooltipLabel}\n                    formatter={tooltipValue}\n                />\n                <Legend\n                    verticalAlign=\"top\"\n                    wrapperStyle={{ lineHeight: '50px' }}\n                    formatter={legend}\n                />\n                <Area\n                    type=\"monotone\"\n                    dataKey={dataKeys.Cases.key}\n                    stroke={dataKeys.Cases.fill}\n                    fillOpacity={1}\n                    fill=\"url(#cases)\" />\n                <Area\n                    type=\"monotone\"\n                    dataKey={dataKeys.Active.key}\n                    stroke={dataKeys.Active.fill}\n                    fillOpacity={1}\n                    fill=\"url(#active)\" />\n                <Area\n                    type=\"monotone\"\n                    dataKey={dataKeys.Recovered.key}\n                    stroke={dataKeys.Recovered.fill}\n                    fillOpacity={1}\n                    fill=\"url(#recovered)\" />\n            </AreaChart>\n            <AreaChart\n                width={width}\n                height={300}\n                data={data}\n                margin={{ top: 5, right: 130, left: 70, bottom: 5 }}>\n                <defs>\n                    <linearGradient id=\"tests\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={dataKeys.Tests.fill} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={dataKeys.Tests.fill} stopOpacity={0}/>\n                    </linearGradient>\n                    <linearGradient id=\"recentTests\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={dataKeys.RecentTests.fill} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={dataKeys.RecentTests.fill} stopOpacity={0}/>\n                    </linearGradient>\n                </defs>\n                <XAxis dataKey=\"Date\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"1 1\" />\n                <Tooltip\n                    labelFormatter={tooltipLabel}\n                    formatter={tooltipValue}\n                />\n                <Legend\n                    verticalAlign=\"top\"\n                    wrapperStyle={{ lineHeight: '50px' }}\n                    formatter={legend}\n                />\n                <Area\n                    type=\"monotone\"\n                    dataKey={dataKeys.Tests.key}\n                    stroke={dataKeys.Tests.fill}\n                    fillOpacity={1}\n                    fill=\"url(#tests)\" />\n                <Area\n                    type=\"monotone\"\n                    dataKey={dataKeys.RecentTests.key}\n                    stroke={dataKeys.RecentTests.fill}\n                    fillOpacity={1}\n                    fill=\"url(#recentTests)\" />\n            </AreaChart>\n        </>\n    )\n}\n","import React, { useState } from 'react';\nimport { Selector } from 'components';\nimport { AllSuburbs } from './all-suburbs';\nimport { BySuburb } from './by-suburb';\n\nconst selectorData = [{\n    key: 'group',\n    name: 'Grouped'\n}, {\n    key: 'non-group',\n    name: 'Separate'\n}, {\n    key: 'by-suburb',\n    name: 'By Suburb'\n}];\n\nexport const Totals = () => {\n\n    const [ displayType, setDisplayType ] = useState(selectorData[0].key);\n\n    const render = () => {\n\n        if(displayType === selectorData[0].key) {\n            return (<AllSuburbs isGrouped />);\n        }\n\n        if(displayType === selectorData[1].key) {\n            return (<AllSuburbs />)\n        }\n\n        if(displayType === selectorData[2].key) {\n            return (<BySuburb />);\n        }\n\n        return (null);\n    }\n\n    return (\n        <>\n            <Selector\n                data={selectorData}\n                title=\"Display\"\n                notifySelected={setDisplayType}\n            />\n            {render()}\n        </>\n    );\n}\n","import React from 'react';\n\nexport const Grid = ({ children }) => (\n    <div className=\"corelation\">\n        <div className=\"population h-header\">Population</div>\n        <div className=\"cases h-header\">Total Cases</div>\n        <div className=\"active h-header\">Active</div>\n        <div className=\"recovered h-header\">Recovered</div>\n        <div className=\"tests h-header\">Tests</div>\n\n        <div className=\"population v-header\">Population</div>\n        <div className=\"cases v-header\">Total Cases</div>\n        <div className=\"active v-header\">Active</div>\n        <div className=\"recovered v-header\">Recovered</div>\n        <div className=\"tests v-header\">Tests</div>\n\n        {children}\n    </div>\n)\n","import React, { useMemo } from 'react';\nimport {\n    ScatterChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Scatter,\n    BarChart,\n    Bar\n} from 'recharts';\nimport { useResizePercent } from 'utils/hooks'\nimport { Grid } from '../grid'\nconst computeHistogram = require('compute-histogram')\n\nconst Histogram = ({ axis, data, width, color }) => {\n    const histogram = useMemo(() =>\n        computeHistogram(\n            data\n            .filter(item => !!item && !!item[axis.keys[0]])\n            .map(item => item[axis.keys[0]])\n        )\n        .map(item => ({ x: item[0], y: item[1] })),\n        [data, axis])\n\n    return (\n        <BarChart\n            width={width}\n            height={width}\n            data={histogram}\n            margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <YAxis/>\n            <XAxis dataKey=\"x\" type=\"number\" />\n            <Tooltip\n                labelFormatter={(value) => `Bin #${value}`}\n                formatter={(value) => [value, 'Total'] } />\n            <Bar dataKey=\"y\" fill={color} />\n        </BarChart>\n    )\n}\n\nexport const AllCharts = ({ plots }) => {\n    const [widthByPercent] = useResizePercent(100 / 6);\n\n    return (\n        <Grid>\n            {plots.map(({id, cell, isDiagonal, data, axis, color}) => {\n                if(isDiagonal) {\n                    return (<div key={id} className={cell}>\n                        <Histogram\n                            axis={axis}\n                            data={data}\n                            width={widthByPercent}\n                            color={color}\n                        />\n                    </div>)\n                }\n\n                return (\n                    <div key={id} className={cell}>\n                        <ScatterChart width={widthByPercent} height={widthByPercent}\n                            margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n                            <CartesianGrid strokeDasharray=\"1 1\" />\n                            <XAxis dataKey={axis.keys[0]} type=\"number\" name={axis.names[0]} unit=\"\" />\n                            <YAxis dataKey={axis.keys[1]} name={axis.names[1]} unit=\"\" />\n                            <Tooltip cursor={{ strokeDasharray: '1 1' }} />\n                            <Scatter data={data} fill={color} />\n                        </ScatterChart>\n                    </div>\n                );\n            })}\n        </Grid>\n    )\n}\n","import './chart-suggest.css';\n\nimport React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\n\nconst renderSuggestion = suggestion => (\n    <div className=\"suggestion-item\">\n        <span>{suggestion.name}</span>\n    </div>\n);\n\nconst charts = [\n    { name: 'Population', value: 'population-population' },\n    { name: 'Population Cases', value: 'population-cases' },\n    { name: 'Population Active', value: 'population-active' },\n    { name: 'Population Recovered', value: 'population-recovered' },\n    { name: 'Population Tests', value: 'population-tests' },\n    { name: 'Cases Population', value: 'cases-population' },\n    { name: 'Cases', value: 'cases-cases' },\n    { name: 'Cases Active', value: 'cases-active' },\n    { name: 'Cases Recovered', value: 'cases-recovered' },\n    { name: 'Cases Tests', value: 'cases-tests' },\n    { name: 'Active Population', value: 'active-population' },\n    { name: 'Active Cases', value: 'active-cases' },\n    { name: 'Active', value: 'active-active' },\n    { name: 'Active Recovered', value: 'active-recovered' },\n    { name: 'Active Tests', value: 'active-tests' },\n    { name: 'Recovered Population', value: 'recovered-population' },\n    { name: 'Recovered Cases', value: 'recovered-cases' },\n    { name: 'Recovered Active', value: 'recovered-active' },\n    { name: 'Recovered', value: 'recovered-recovered' },\n    { name: 'Recovered Tests', value: 'recovered-tests' },\n    { name: 'Tests Population', value: 'tests-population' },\n    { name: 'Tests Cases', value: 'tests-cases' },\n    { name: 'Tests Active', value: 'tests-active' },\n    { name: 'Tests Recovered', value: 'tests-recovered' },\n    { name: 'Tests', value: 'tests-tests' }\n];\n\nexport const ChartSuggest = ({ onSuburbSelected, value: initial }) => {\n\n    const initialSuggestion = charts.filter(item => item.value === initial)[0];\n\n    const [value, setValue ] = useState(initialSuggestion?.value || '');\n    const [ suggestions, setSuggestions ] = useState([]);\n\n    const getSuggestions = value =>\n        charts.filter(item =>\n                item.name.toLowerCase().includes(value.toLowerCase()))\n            .slice(0, 10);\n\n    const onSuggestionsFetchRequested = ({ value }) => {\n        if(!value || value.length < 2) {\n            return;\n        }\n\n        const data = getSuggestions(value);\n\n        if(data.length > 0) {\n            setSuggestions(data);\n        }\n    };\n\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    };\n\n    const onChange = (event, { newValue }) => {\n        setValue(newValue);\n    };\n\n    const getSuggestionValue = suggestion => {\n        const result = suggestion;\n\n        if(onSuburbSelected) {\n            setTimeout(() => {\n                onSuburbSelected(result.value);\n            }, 0);\n        }\n\n        return result.name;\n    };\n\n    const inputProps = {\n        placeholder: 'Search chart type, ex. population',\n        value,\n        onChange\n    };\n\n    return (\n        <div className=\"chart-suggest\">\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n            />\n        </div>\n    );\n}\n","import React, { useState, useMemo } from 'react';\nimport {\n    ComposedChart,\n    CartesianGrid,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend,\n    Scatter,\n    BarChart,\n    Bar,\n    Line\n} from 'recharts';\nimport { linearRegression, linearRegressionLine } from 'simple-statistics';\nimport { ChartSuggest } from '../chart-suggest'\nimport { useResize } from 'utils/hooks'\nconst computeHistogram = require('compute-histogram')\n\nconst Suggester = ({ selectedChart, selectChart }) =>\n    <ChartSuggest value={selectedChart} onSuburbSelected={selectChart} />\n\nconst Histogram = ({ plot, width }) => {\n    const histogram = useMemo(() =>\n        computeHistogram(\n            plot.data\n            .filter(item => !!item && !!item[plot.axis.keys[0]])\n            .map(item => item[plot.axis.keys[0]])\n        )\n        .map(item => ({ x: item[0], y: item[1] })),\n        [plot])\n\n    return (\n        <BarChart\n            width={width}\n            height={500}\n            data={histogram}\n            margin={{ top: 5, right: 130, left: 70, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <XAxis dataKey=\"x\" type=\"number\" />\n            <Tooltip\n                labelFormatter={(value) => `Bin #${value}`}\n                formatter={(value) => [value, 'Total'] } />\n            <Legend\n                verticalAlign=\"top\"\n                wrapperStyle={{ lineHeight: '50px' }}\n                formatter={() => `${plot.axis.names[0]} - Histogram`}\n            />\n            <Bar dataKey=\"y\" fill={plot.color} />\n        </BarChart>\n    )\n}\n\n\nconst ScatterPlot = ({ plot, width }) => {\n\n    const [ regressionFrom, regressionTo ] = plot.axis.keys\n\n    const result = useMemo(() => {\n        const line = linearRegressionLine(\n            linearRegression(plot.data.map(item => [item[regressionFrom], item[regressionTo] ]))\n        )\n\n        return plot.data\n            .concat([{\n                [regressionFrom]: plot.data[0][regressionFrom],\n                regression: Math.trunc(line(plot.data[0][regressionFrom]))  }])\n            .concat([{\n                [regressionFrom]: plot.data[plot.data.length -1][regressionFrom],\n                regression: Math.trunc(line(plot.data[plot.data.length -1][regressionFrom])) }])\n    }, [regressionFrom, regressionTo, plot.data])\n\n    return (\n        <ComposedChart width={width} height={500} data={result}\n            margin={{ top: 5, right: 130, left: 70, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <XAxis dataKey={regressionFrom} type=\"number\" name={plot.axis.names[0]} unit=\"\" />\n            <YAxis name={plot.axis.names[1]} unit=\"\" />\n            <Tooltip\n                labelFormatter={(value) => `${plot.axis.names[0]}: ${value}`}\n                formatter={(value) => [value, plot.axis.names[1]] } />\n            <Legend\n                verticalAlign=\"top\"\n                wrapperStyle={{ lineHeight: '50px' }}\n                formatter={(value) => value === 'regression' ? 'Regression line' : `${plot.axis.names[0]} - ${plot.axis.names[1]}`} />\n            <Scatter dataKey={regressionTo} fill={plot.color} />\n            <Line dataKey=\"regression\" stroke=\"red\"  />\n        </ComposedChart>\n    )\n}\n\nexport const ChartByPair = ({ plots }) => {\n    const [width] = useResize();\n    const [ selectedChart, selectChart ] = useState('');\n\n    const plot = useMemo(() => plots.filter(item => item.cell === selectedChart)[0],\n        [selectedChart, plots]);\n\n    const renderBody = (plot) =>\n        plot.isDiagonal ?\n            (<Histogram {...{ plot, width }} />) :\n            (<ScatterPlot {...{ plot, width }} />)\n\n    return (\n        <>\n            <Suggester {...{selectedChart, selectChart}} />\n            {plot && renderBody(plot)}\n        </>\n    )\n}\n","import React from 'react';\nimport { AllCharts } from './all-charts'\nimport { ChartByPair } from './by-pair'\n\nexport const ScatterPlot = ({ plots, byName }) =>\n    byName ?\n    (<ChartByPair plots={plots} />) :\n    (<AllCharts plots={plots} />)\n","import React from 'react';\nimport { sampleCorrelation } from 'simple-statistics';\nimport { Grid } from './grid'\n\nexport const Numbers = ({ plots }) => (\n    <Grid>\n        {plots.map(({id, cell, isDiagonal, data, axis }) => {\n            if(isDiagonal) {\n                return (\n                    <div key={id} className={cell}>\n                        <span className=\"number-box\">1</span>\n                    </div>\n                )\n            }\n\n            const value = sampleCorrelation(\n                data.map(item => item[axis.keys[0]]),\n                data.map(item => item[axis.keys[1]])\n            ).toFixed(5)\n\n            return (\n                <div key={id} className={cell}>\n                    <span className=\"number-box\">\n                        {value}\n                    </span>\n                </div>\n            );\n        })}\n    </Grid>\n)\n","import './correlation.css'\n\nimport React, { useContext, useMemo, useState } from 'react';\nimport { DataContext, Selector } from 'components';\nimport { ScatterPlot } from './scatter-plots';\nimport { Numbers } from './numbers'\n\nconst selectorData = [{\n    key: 'numbers',\n    name: 'Numbers'\n},{\n    key: 'grouped',\n    name: 'Grouped'\n},{\n    key: 'by-pair',\n    name: 'By Pair'\n}];\n\nexport const Correlation = () => {\n    const { cases, population, selectedDate } = useContext(DataContext);\n    const [ displayType, setDisplayType ] = useState(selectorData[0].key);\n\n    const plots = useMemo(() => {\n\n        if(!population) {\n            return [];\n        }\n\n        const casesByCode = cases.get(selectedDate);\n\n        const result = population.reduce((acc, curr) => {\n            const postalCode = curr.POA_NAME16.toString();\n\n            if(casesByCode.has(postalCode)) {\n                const cases = casesByCode.get(postalCode);\n\n                acc.push({\n                    population: curr.Tot_p_p,\n                    totalCases: cases.Cases,\n                    active: cases.Active,\n                    recovered: cases.Recovered,\n                    tests: cases.Tests\n                });\n            }\n\n            return acc;\n\n        }, []);\n\n        const byPopulation = result.map(_ => _);\n        byPopulation.sort((a, b) => a.population - b.population);\n\n        const byCases = result.map(_ => _);\n        byCases.sort((a, b) => a.totalCases - b.totalCases);\n\n        const byActive = result.map(_ => _);\n        byActive.sort((a, b) => a.active - b.active);\n\n        const byRecovered = result.map(_ => _);\n        byRecovered.sort((a, b) => a.recovered - b.recovered);\n\n        const byTests = result.map(_ => _);\n        byTests.sort((a, b) => a.tests - b.tests);\n\n        return [{\n            id: 1,\n            cell: \"population-population\",\n            isDiagonal: true,\n            axis: { keys: [\"population\"], names: [\"Population\"] },\n            data: byPopulation,\n            color: '#8884d8'\n        },{\n            id: 2,\n            cell: \"population-cases\",\n            isDiagonal: false,\n            data: byCases,\n            axis: { keys: [\"totalCases\", \"population\"], names: [\"Total Cases\", \"Population\"] },\n            color: '#8884d8'\n        },{\n            id: 3,\n            cell: \"population-active\",\n            isDiagonal: false,\n            data: byActive,\n            axis: { keys: [\"active\", \"population\"], names: [\"Active\", \"Population\"] },\n            color: '#8884d8'\n        },{\n            id: 4,\n            cell: \"population-recovered\",\n            isDiagonal: false,\n            data: byRecovered,\n            axis: { keys: [\"recovered\", \"population\"], names: [\"Recovered\", \"Population\"] },\n            color: '#8884d8'\n        },{\n            id: 5,\n            cell: \"population-tests\",\n            isDiagonal: false,\n            data: byTests,\n            axis: { keys: [\"tests\", \"population\"], names: [\"Tests\", \"Population\"] },\n            color: '#8884d8'\n        },{\n            id: 6,\n            cell: \"cases-population\",\n            isDiagonal: false,\n            data: byPopulation,\n            axis: { keys: [\"population\", \"totalCases\"], names: [\"Population\", \"Total Cases\"] },\n            color: '#ff8080'\n        },{\n            id: 7,\n            cell: \"cases-cases\",\n            isDiagonal: true,\n            axis: { keys: [\"totalCases\"], names: [\"Total Cases\"] },\n            data: byCases,\n            color: '#ff8080'\n        },{\n            id: 8,\n            cell: \"cases-active\",\n            isDiagonal: false,\n            data: byActive,\n            axis: { keys: [\"active\", \"totalCases\"], names: [\"Active\", \"Total Cases\"] },\n            color: '#ff8080'\n        },{\n            id: 9,\n            cell: \"cases-recovered\",\n            isDiagonal: false,\n            data: byRecovered,\n            axis: { keys: [\"recovered\", \"totalCases\"], names: [\"Recovered\", \"Total Cases\"] },\n            color: '#ff8080'\n        }, {\n            id: 10,\n            cell: \"cases-tests\",\n            isDiagonal: false,\n            data: byTests,\n            axis: { keys: [\"tests\", \"totalCases\"], names: [\"Tests\", \"Total Cases\"] },\n            color: '#ff8080'\n        },{\n            id: 11,\n            cell: \"active-population\",\n            isDiagonal: false,\n            data: byPopulation,\n            axis: { keys: [\"population\", \"active\"], names: [\"Population\", \"Active\"] },\n            color: '#e60000'\n        },{\n            id: 12,\n            cell: \"active-cases\",\n            isDiagonal: false,\n            data: byCases,\n            axis: { keys: [\"totalCases\", \"active\"], names: [\"Total Cases\", \"Active\"] },\n            color: '#e60000'\n        },{\n            id: 13,\n            cell: \"active-active\",\n            isDiagonal: true,\n            axis: { keys: [\"active\"], names: [\"Active\"] },\n            data: byActive,\n            color: '#e60000'\n        },{\n            id: 14,\n            cell: \"active-recovered\",\n            isDiagonal: false,\n            data: byRecovered,\n            axis: { keys: [\"recovered\", \"active\"], names: [\"Recovered\", \"Active\"] },\n            color: '#e60000'\n        },{\n            id: 15,\n            cell: \"active-tests\",\n            isDiagonal: false,\n            data: byTests,\n            axis: { keys: [\"tests\", \"active\"], names: [\"Tests\", \"Active\"] },\n            color: '#e60000'\n        },{\n            id: 16,\n            cell: \"recovered-population\",\n            isDiagonal: false,\n            data: byPopulation,\n            axis: { keys: [\"population\", \"recovered\"], names: [\"Population\", \"Recovered\"] },\n            color: '#3aba5e'\n        },{\n            id: 17,\n            cell: \"recovered-cases\",\n            isDiagonal: false,\n            data: byCases,\n            axis: { keys: [\"totalCases\", \"recovered\"], names: [\"Total cases\", \"Recovered\"] },\n            color: '#3aba5e'\n        },{\n            id: 18,\n            cell: \"recovered-active\",\n            isDiagonal: false,\n            data: byActive,\n            axis: { keys: [\"active\", \"recovered\"], names: [\"Active\", \"Recovered\"] },\n            color: '#3aba5e'\n        },{\n            id: 19,\n            cell: \"recovered-recovered\",\n            isDiagonal: true,\n            axis: { keys: [\"recovered\"], names: [\"Recovered\"] },\n            data: byRecovered,\n            color: '#3aba5e'\n        },{\n            id: 20,\n            cell: \"recovered-tests\",\n            isDiagonal: false,\n            data: byTests,\n            axis: { keys: [\"tests\", \"recovered\"], names: [\"Tests\", \"Recovered\"] },\n            color: '#3aba5e'\n        },{\n            id: 21,\n            cell: \"tests-population\",\n            isDiagonal: false,\n            data: byPopulation,\n            axis: { keys: [\"population\", \"tests\"], names: [\"Population\", \"Tests\"] },\n            color: '#4478b8'\n        },{\n            id: 22,\n            cell: \"tests-cases\",\n            isDiagonal: false,\n            data: byCases,\n            axis: { keys: [\"totalCases\", \"tests\"], names: [\"Total cases\", \"Tests\"] },\n            color: '#4478b8'\n        },{\n            id: 23,\n            cell: \"tests-active\",\n            isDiagonal: false,\n            data: byActive,\n            axis: { keys: [\"active\", \"tests\"], names: [\"Active\", \"Tests\"] },\n            color: '#4478b8'\n        },{\n            id: 24,\n            cell: \"tests-recovered\",\n            isDiagonal: false,\n            data: byRecovered,\n            axis: { keys: [\"recovered\", \"tests\"], names: [\"Recovered\", \"Tests\"] },\n            color: '#4478b8'\n        },{\n            id: 25,\n            cell: \"tests-tests\",\n            isDiagonal: true,\n            axis: { keys: [\"tests\"], names: [\"Tests\"] },\n            data: byTests,\n            color: '#4478b8'\n        }];\n\n    }, [selectedDate, cases, population]);\n\n    const render = () => {\n\n        if(displayType === selectorData[0].key) {\n            return <Numbers plots={plots} />\n        }\n\n        if(displayType === selectorData[1].key) {\n            return <ScatterPlot plots={plots} byName={false} />\n        }\n\n        if(displayType === selectorData[2].key) {\n            return <ScatterPlot plots={plots} byName={true} />\n        }\n\n        return (null);\n    }\n\n    return (\n        <>\n            <Selector\n                data={selectorData}\n                title=\"Display\"\n                notifySelected={setDisplayType}\n            />\n            {render()}\n        </>\n    );\n}\n","import 'react-tabs/style/react-tabs.css';\nimport './app.css';\n\nimport React from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport {\n    Map, Totals, Correlation, DataProvider, DateSlider\n} from 'components'\n\nconst App =() => (\n    <DataProvider>\n        <header>\n            <h1>NSW Australia Corona virus spread analysis</h1>\n            <p>The information presented is for demonstration purposes only and not for research\n                or any other purposes. No part of these pages, either texts or images may be used\n                for any purpose other than personal use\n            </p>\n        </header>\n        <section role=\"main\">\n            <DateSlider />\n            <Tabs>\n                <TabList>\n                    <Tab>Map</Tab>\n                    <Tab>Totals</Tab>\n                    <Tab>Correlation</Tab>\n                </TabList>\n                <TabPanel>\n                    <Map />\n                </TabPanel>\n                <TabPanel>\n                    <Totals />\n                </TabPanel>\n                <TabPanel>\n                    <Correlation />\n                </TabPanel>\n            </Tabs>\n        </section>\n    </DataProvider>\n);\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}